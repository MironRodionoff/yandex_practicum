# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ImCg97qPKmBntmVzIA8ReKZCvIellYeg
"""

# #from tensorflow.keras.layers import Conv2D, Flatten, Dense, AvgPool2D, GlobalAveragePooling2D
# import pandas as pd

# from tensorflow.keras.preprocessing.image import ImageDataGenerator
# from tensorflow.keras.models import Sequential
# from tensorflow.keras.applications.resnet import ResNet50
# from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten
# from tensorflow.keras.optimizers import Adam


# def load_train(path):
#     train_datagen = ImageDataGenerator(rescale=1./255.,horizontal_flip=True,
#                                  validation_split=0.25, vertical_flip=True)
#     train_datagen_flow  = train_datagen.flow_from_dataframe(

#         target_size=(224, 224),
#         batch_size=32,
#         class_mode='raw',
#         dataframe=pd.read_csv(path+'labels.csv'),
#         directory=path + 'final_files/',
#         x_col='file_name',
#         y_col='real_age',
#         subset='training',
#         seed=12345)
#     return train_datagen_flow

# def load_test(path):
#     val_datagen = ImageDataGenerator(rescale=1./255.,#horizontal_flip=True,
#                                  validation_split=0.25)#, vertical_flip=True)
#     val_datagen_flow  = val_datagen.flow_from_dataframe(

#         target_size=(224, 224),
#         batch_size=32,
#         class_mode='raw',
#         dataframe=pd.read_csv(path+'labels.csv'),
#         directory=path + 'final_files/',
#         x_col='file_name',
#         y_col='real_age',
#         subset='validation',
#         seed=12345)
#     return val_datagen_flow

# # def create_model(input_shape):
# #     backbone = ResNet50(input_shape=input_shape,
# #                     weights='imagenet',
# #                     include_top=False)
# #     model = Sequential()
# #     model.add(backbone)
# #     model.add(GlobalAveragePooling2D())
# #     #model.add(Dense(100, activation='relu'))
# #     model.add(Dense(10, activation='relu'))
# #     model.add(Dense(1, activation='relu'))
# #     optimizer = Adam(lr=0.0002)
# #     model.compile(optimizer=optimizer,
# #                   loss='mean_squared_error',
# #                   metrics=['mae'])
# #     return model

# def create_model(input_shape):
#     adam = Adam(0.0001)

#     backbone = ResNet50(input_shape=input_shape,
#                         weights='imagenet',
#                         include_top=False)

#     model = Sequential()
#     model.add(backbone)
#     model.add(GlobalAveragePooling2D())
#     model.add(Dense(1, activation='relu'))
#     model.compile(optimizer=adam,
#                   loss='mae',
#                   metrics=['mae'])

#     return model

# def train_model(model, train_data, test_data, batch_size=None, epochs=7, steps_per_epoch=None, validation_steps=None):
#     if steps_per_epoch is None:
#         steps_per_epoch = len(train_datagen_flow)
#     if validation_steps is None:
#         validation_steps = len(val_datagen_flow)

#     model.fit(train_data,
#           validation_data=test_data,
#           #batch_size = batch_size,
#           #steps_per_epoch=steps_per_epoch,
#           #validation_steps=validation_steps,
#           epochs=epochs,verbose=2)

#     return model

import pandas as pd
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.resnet import ResNet50
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam


def load_train(path):
    labels = pd.read_csv(path + 'labels.csv')
    train_datagen = ImageDataGenerator(
        validation_split=0.25,
        horizontal_flip=True,
        rescale=1./255)
    train_gen_flow = train_datagen.flow_from_dataframe(
        dataframe=labels,
        directory=path + 'final_files/',
        x_col='file_name',
        y_col='real_age',
        target_size=(224, 224),
        batch_size=16,
        class_mode='raw',
        subset='training',
        seed=12345)

    return train_gen_flow

def load_test(path):
    labels = pd.read_csv(path + 'labels.csv')
    test_datagen = ImageDataGenerator(
        validation_split=0.25,
        rescale=1./255)
    test_gen_flow = test_datagen.flow_from_dataframe(
        dataframe=labels,
        directory=path + 'final_files/',
        x_col='file_name',
        y_col='real_age',
        target_size=(224, 224),
        batch_size=16,
        class_mode='raw',
        subset='validation',
        seed=12345)

    return test_gen_flow

def create_model(input_shape):
    backbone = ResNet50(weights='imagenet',
                        input_shape=input_shape,
                        include_top=False)

    model = Sequential()
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(1, activation='relu'))

    optimizer = Adam(lr=0.0001)
    model.compile(optimizer=optimizer, loss='mse', metrics=['mae'])

    return model

def train_model(model, train_data, test_data, batch_size=None, epochs=10,
                steps_per_epoch=None, validation_steps=None):

    if steps_per_epoch is None:
        steps_per_epoch = len(train_data)
    if validation_steps is None:
        validation_steps = len(test_data)

    model.fit(train_data,
              validation_data=test_data,
              batch_size=batch_size, epochs=epochs,
              steps_per_epoch=steps_per_epoch,
              validation_steps=validation_steps,
              verbose=2)

    return model